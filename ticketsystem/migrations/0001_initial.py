# Generated by Django 5.0.1 on 2024-02-17 11:22

import backend.storage_backends
import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StripeAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('stripe_connected', models.BooleanField(default=False)),
                ('stripe_complete', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('student_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('user_type', models.CharField(choices=[('user', 'user'), ('ticket_scanner', 'ticket_scanner')], default='user', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('club_logo', models.ImageField(blank=True, null=True, upload_to='club_logo/')),
                ('club_cover', models.ImageField(blank=True, null=True, upload_to='club_cover/')),
                ('website', models.URLField(blank=True, null=True)),
                ('content', models.TextField()),
                ('club_admins', models.ManyToManyField(related_name='club_admins', to=settings.AUTH_USER_MODEL)),
                ('stripe', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ticketsystem.stripeaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=1000)),
                ('price', models.FloatField()),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('soldout', models.IntegerField(default=False)),
                ('event_cover', models.ImageField(blank=True, null=True, upload_to='event_cover/')),
                ('location', models.CharField(max_length=50)),
                ('event_type', models.CharField(choices=[('A', 'Anniversary'), ('B', 'Birthday'), ('C', 'Charity'), ('D', 'Dinner'), ('E', 'Exhibition'), ('F', 'Festival'), ('G', 'Gathering'), ('H', 'Hackathon'), ('I', 'Interview'), ('J', 'Job Fair'), ('L', 'Lecture'), ('M', 'Meeting'), ('N', 'Networking'), ('O', 'Other'), ('P', 'Party'), ('R', 'Rally'), ('S', 'Seminar'), ('T', 'Tournament'), ('V', 'Visit'), ('W', 'Workshop'), ('X', 'Expo')], default='M', max_length=10)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketsystem.club')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ticketsystem.event'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, storage=backend.storage_backends.PrivateMediaStorage(), upload_to='profile_picture/')),
                ('birthday', models.DateField(blank=True, null=True)),
                ('course', models.CharField(default='none', max_length=100)),
                ('year', models.IntegerField(default=0)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('stripe', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ticketsystem.stripeaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('price', models.FloatField()),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('A', 'Active'), ('C', 'Cancelled'), ('R', 'Refunded'), ('U', 'Used')], default='A', max_length=10)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='ticket_qr_code/')),
                ('scanned_at', models.DateTimeField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketsystem.event')),
                ('scanned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scanned_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'event')},
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketsystem.club')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'club')},
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('sender', 'receiver')},
            },
        ),
        migrations.CreateModel(
            name='TransferRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transfer_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_transfer_requests', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketsystem.ticket')),
            ],
            options={
                'unique_together': {('sender', 'ticket')},
            },
        ),
    ]
